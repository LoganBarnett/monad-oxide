#+title:     monad-oxide
#+author:    Logan Barnett-Hoy
#+email:     logustus@gmail.com
#+date:      <2022-07-13 Wed>
#+language:  en
#+file_tags:
#+tags:

* Summary

=monad-oxide= is a Ruby take on Monads seen in [[https://www.rust-lang.org/][Rust's]] [[https://doc.rust-lang.org/stable/std/][=Std=]] package. Primarily
this means [[https://doc.rust-lang.org/std/result/enum.Result.html#][=Result=]] and [[https://doc.rust-lang.org/std/option/enum.Option.html][=Option=]].

You can use these structures in Ruby to achieve more reliable error handling and
results processing. =Result= and =Option= are from the Monad family, which is
essentially "programmable semicolons" - sequential operations which can be
chained and have an error flow to them.

This library attempts to account for some Rubyisms and will diverge from Rust's
approach on occasion.

For a great introductory talk showing the value of these constructs, see [[https://vimeo.com/113707214][Railway
oriented programming: Error handling in functional languages by Scott Wlaschin]].
The talk is about an hour long, but has a great comparison of imperative vs.
functional error handling. In this library, =Either= is essentially the same as
=Result=, and =Maybe= the same as =Option=.

* Examples
:properties:
:header-args: :ruby "nix develop '.#default' --command bash -c 'bundle exec ruby'" :dir .
:end:

Example Disclaimer:

Despite lots of these examples using =unwrap= and =unwrap_err=, these are highly
recommended not be used because it breaks out of the monad chain in a dangerous
way. Exceptions can be raised, which unwinds your stack - you're basically back
where you started without =monad-oxide=. These methods are provided for
convenience and testing, but it might be necessary to use these in some
production instances. If so, code defensively around their usages and try to use
the methods sparingly.  Having a dedicated quarantine zone around your =unwrap=
and =unwrap_err= is the most preferable.

** map

Changing the inner value with =map=:
#+begin_src ruby :results value :exports both
require 'monad-oxide'

MonadOxide.ok('test')
  .map(->(s) { s.upcase() })
  .unwrap() # 'test'
#+end_src

#+RESULTS:
: TEST

Changing the =Result= type based on input:
#+begin_src ruby :exports both
require 'monad-oxide'

MonadOxide.ok('test')
  .and_then(->(s) {
    if s =~ /e/
      MonadOxide.err(ArgumentError.new("Can't have 'e' in test data."))
    else
      MonadOxide.ok(s.upcase())
    end
  })
  .unwrap_err() # The above ArgumentError.
#+end_src

#+RESULTS:
: #<ArgumentError: Can't have 'e' in test data.>

** inspect

Inspecting a value in the chain without changing it:
#+begin_src ruby :exports both
require 'logger'
require 'monad-oxide'

logger = Logger.new(STDERR)
MonadOxide.ok('test')
  .and_then(->(s) {
    if s =~ /e/
      MonadOxide.err(ArgumentError.new("Can't have 'e' in test data."))
    else
      MonadOxide.ok(s.upcase())
    end
  })
  .inspect_err(logger.method(:error)) # Print any errors to the error log.
  .inspect_ok(logger.method(:info)) # Print any non-errors to the info log.
  .unwrap_err() # The above ArgumentError.
#+end_src

#+RESULTS:
: #<ArgumentError: Can't have 'e' in test data.>
** =<kind>?= checks

You can check to see if you're working with an =Ok= or =Err= with =ok?= and
=err?=.  Generally these should see the most use with your unit tests in the
form of =expect(foo).to(be_ok())= and =expect(bar).to(be_err()))=.  It is
advised to favor mechanisms like =#match= or one of the safe =#unwrap= variants
when attempting to do conditional work based on the =Result= subtype, rather
than adding branching paths.

#+begin_src ruby :results value :exports both
require 'monad-oxide'
MonadOxide.ok('foo').ok?()
#+end_src

#+RESULTS:
: true

#+begin_src ruby :results value :exports both
require 'monad-oxide'
MonadOxide.ok('foo').err?()
#+end_src

#+RESULTS:
: false

#+begin_src ruby :results value :exports both
require 'monad-oxide'
MonadOxide.err('foo').ok?()
#+end_src

#+RESULTS:
: false

#+begin_src ruby :results value :exports both
require 'monad-oxide'
MonadOxide.err('foo').err?()
#+end_src

#+RESULTS:
: true

*** with =rspec=

And with =rspec=.  There's some difficulty in finding the right incantation to
call into =rspec= without actually running =rspec=, or getting =rspec= to be the
"ruby" runner for =org-babel=, so results aren't shown.

#+begin_src ruby :results none :exports code
require 'monad-oxide'
expect(MonadOxide.ok('foo')).to(be_ok) # Pass.
expect(MonadOxide.ok('foo')).to(be_err) # Fail.
expect(MonadOxide.err('foo')).to(be_ok) # Fail.
expect(MonadOxide.err('foo')).to(be_err) # Pass.
#+end_src


** unwrapping

Unwrapping is the act of accessing the value inside the =Result=. It is often
considered dangerous because it raises exceptions - an action counter to the
whole purpose of =monad-oxide=. However, there are variants documented below to
make the operation safe.

*** unwrap and unwrap_err

=unwrap= and =unwrap_err= both access inner =Ok= and =Err= data, respectively.
If the =Result= is mismatched (=unwrap= and =Err= or =unwrap_err= and =Ok=), an
=MonadOxide::UnwrapError= is raised.

It is recommended to only use this for debugging purposes and instead seek
better, more functional uses in =Result= to work with the data in the =Result=.

=Ok= with =unwrap= just gets the data.

#+begin_src ruby :results value :exports both
require 'monad-oxide'

MonadOxide.ok('foo').unwrap()
#+end_src

#+RESULTS:
: foo

=Err= with =unwrap= raises =UnwrapError=:

#+begin_src ruby :results value :exports both
require 'monad-oxide'

begin
  MonadOxide.err('foo').unwrap()
rescue => e
  e.inspect()
end
#+end_src

#+RESULTS:
: #<MonadOxide::UnwrapError: MonadOxide::Err with "foo" could not be unwrapped as an Ok.>

=Ok= with =unwrap_err= raises =UnwrapError=:

#+begin_src ruby :results value :exports both
require 'monad-oxide'

begin
  MonadOxide.ok('foo').unwrap_err()
rescue => e
  e.inspect()
end
#+end_src

#+RESULTS:
: #<MonadOxide::UnwrapError: MonadOxide::Ok with "foo" could not be unwrapped as an Err.>

=Ok= with =unwrap= just gets the data.

#+begin_src ruby :results value :exports both
require 'monad-oxide'

MonadOxide.err('foo').unwrap_err()
#+end_src

#+RESULTS:
: foo

*** unwrap_or

=unwrap_or= provides a safe means of unwrapping via a fallback value that is
provided to =unwrap_or=.

For =Ok=, =unwrap_or= provides the value in the =Ok=.

#+begin_src ruby :results value :exports both
require 'monad-oxide'

MonadOxide.ok('foo').unwrap_or('bar')
#+end_src

#+RESULTS:
: foo

For =Err=, =unwrap_or= provides the value passed to =unwrap_or=.

#+begin_src ruby :results value :exports both
require 'monad-oxide'

MonadOxide.err('foo').unwrap_or('bar')
#+end_src

#+RESULTS:
: bar

** arrays

You can use =#into_result= to convert an =Array= of =Results= to =Result= of an
=Array=.

#+begin_src ruby :results value verbatim :exports both
require 'monad-oxide'

[
  MonadOxide.ok('foo'),
  MonadOxide.ok('bar'),
]
  .into_result()
  .unwrap()
#+end_src

#+RESULTS:
: ["foo", "bar"]

=#into_result= will provide an =Err= if any of the elements in the =Array= are
=Err=.

#+begin_src ruby :results value verbatim :exports both
require 'monad-oxide'

[
  MonadOxide.ok('foo'),
  MonadOxide.err('bar'),
  MonadOxide.ok('baz'),
  MonadOxide.err('qux'),
]
  .into_result()
  .unwrap_err()
#+end_src

#+RESULTS:
: ["bar", "qux"]

** complex operations

Complex operation:

#+begin_src ruby :exports both
require 'logger'
require 'monad-oxide'

class AppError < Exception; end

logger = Logger.new(STDERR)
MonadOxide.ok('test')
  .and_then(->(s) {
    if s =~ /e/
      MonadOxide.err(ArgumentError.new("Can't have 'e' in test data."))
    else
      MonadOxide.ok(s.upcase())
    end
  })
  .map(->(s) { s.trim() }) # Won't actually get called due to error.
  .inspect_err(logger.method(:error)) # Print any errors to the error log.
  .inspect_ok(logger.method(:info)) # Print any non-errors to the info log.
  .or_else(->(e) {
    if e.kind_of?(ArgumentError)
      # Convert to an app-specific error for ArgumentErrors.
      MonadOxide.err(AppError.new(e))
    else
      # For other errors, just chain it along. Backtrace will be preserved.
      MonadOxide.err(e)
    end
  })
  .unwrap_err() # The above AppError containing an ArgumentError.
#+end_src

* Honorable Mentions

https://github.com/mxhold/opted has similar aims to =monad-oxide= - essentially
a Rust port of the =Result= type.

* COMMENT Quirks in Documentation

I can't make repeating =:header-args:= to split up the lines, despite there
seeming to be _some_ examples indicating otherwise.

=:exports both= doesn't work in =:header-args:= and must be applied individually
to each code block.

These may have bugs and I should research that at some point.
